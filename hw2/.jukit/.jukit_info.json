{"cmd": "\n# Part 2\n\n#pick a random starting point for the robot\nrobot_x = np.random.randint(0,25)\nrobot_y = np.random.randint(0,25)\nprev_robot_positions = [(robot_x + 0.5, robot_y + 0.5)]\nprev_robot_x_coords, prev_robot_y_coords = zip(*prev_robot_positions)\n\n# pick a random starting point for the food source\nfood_x = np.random.randint(0,25)\nfood_y = np.random.randint(0,25)\n\nbelief = np.full((25, 25), 1/(25**2))\nsimulator = np.zeros((25, 25))\nsimulator = bernoulli_distribution(simulator, food_x, food_y)\n\nfound = False\nentropy = 100\n\n# data\nbeliefs = []\nrobot_positions = [(robot_x + 0.5, robot_y + 0.5)]\nprev_x_coords_list = []\nprev_y_coords_list = []\n\nfor i in range(100):\n    beliefs.append(belief)\n    robot_positions.append((robot_x + 0.5, robot_y + 0.5))\n    prev_robot_positions.append((robot_x + 0.5, robot_y + 0.5))\n    prev_robot_x_coords, prev_robot_y_coords = zip(*prev_robot_positions)\n    prev_x_coords_list.append(prev_robot_x_coords)\n    prev_y_coords_list.append(prev_robot_y_coords)\n\n    # check if the entropy is lower than the threshold, this means we probably\n    # found the source\n    if robot_x == food_x and robot_y == food_y:\n        belief[robot_y, robot_x] = 1.0\n    if entropy < 1e-3:\n        break\n\n    # plt.imshow(belief, cmap='viridis', origin='lower', extent=[0, 25, 0, 25])\n    # plt.plot(food_x+0.5, food_y+0.5, color='green', marker='.', markersize=3, markeredgewidth=3, label='source')\n    # plt.plot(prev_robot_x_coords, prev_robot_y_coords, color='blue', linestyle='-', marker='.', markersize=3, markeredgewidth=3)\n    # plt.plot(robot_x+0.5, robot_y+0.5, color='red', marker='.', markersize=3, markeredgewidth=3, label='robot')\n    # # plt.colorbar(label=\"probability\")\n    # plt.title(\"infotaxis\")\n    # plt.xlabel(\"x\")\n    # plt.ylabel(\"y\")\n    # plt.xticks(range(0, 26, 1), fontsize=7)\n    # plt.yticks(range(0, 26, 1), fontsize=7)\n    # plt.grid(True)\n    # plt.pause(0.001)\n    # plt.cla()\n\n    # first, simulate a measurement\n    z = np.random.uniform(0, 1)\n    if z < simulator[robot_y, robot_x]:\n        print(\"yes\")\n        robot_x, robot_y, entropy = infotaxis(robot_x, robot_y, belief)\n        belief = new_bayes_update(belief, robot_x, robot_y, True)\n    else:\n        robot_x, robot_y, entropy = infotaxis(robot_x, robot_y, belief)\n        belief = new_bayes_update(belief, robot_x, robot_y, False)\n\nfig, axs = plt.subplots(2,5,figsize=(50, 25))\nfig.subplots_adjust(hspace=0.1, wspace=0.3)\nfig.suptitle(\"Problem 2 3rd Pic\")\nrow, col = 0, 0\nprint(f\"len beliefs: {len(beliefs)}, len_beliefs//10: {len(beliefs)//10}\")\nfor i in range(len(beliefs)//10, len(beliefs)+1,len(beliefs)//10):\n    print(f\"i: {i}, row: {row}, col: {col}\")\n    ax = axs[row, col]\n    ax.imshow(beliefs[i-1], cmap='viridis', origin='lower', extent=[0, 25, 0, 25])\n    ax.plot(food_x+0.5, food_y+0.5, color='green', marker='.', markersize=3, markeredgewidth=3, label='source')\n    ax.plot(prev_x_coords_list[i-1], prev_y_coords_list[i-1], color='blue', linestyle='-', marker='.', markersize=3, markeredgewidth=3)\n    ax.plot(robot_positions[i][0], robot_positions[i][1], color='red', marker='.', markersize=3, markeredgewidth=3, label='robot')\n    ax.set_title(f\"iteration {i}\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_xticks(range(0, 26, 1), fontsize=0.1)\n    ax.set_yticks(range(0, 26, 1), fontsize=0.1)\n    ax.tick_params(axis='both', which='major', labelsize=1)\n    ax.grid(True)\n\n    if row == 0:\n        row = 1\n    else:\n        col += 1\n        row = 0\n\nplt.show()\n", "cmd_opts": " --cell_id=bcAmIlQ6H0", "import_complete": 1, "terminal": "nvimterm"}